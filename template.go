package main

// Template is template for cache generation
const Template = `// Code generated by go-jenny(taylz.io/cmd/go-jenny@` + Version + `) DO NOT EDIT.

package {{.Package}}

import ({{range .Stdlib}}
	{{.}}{{end}}{{if .Remote}}
{{range .Remote}}
	{{.}}{{end}}{{end}}
)

// {{.Type}} is an observable concurrent in-memory datastore
type {{.Type}} struct {
	dat map[{{.Key}}]{{.Val}}
	mu  sync.Mutex
	obs []{{.Type}}Observer
}

// {{.Type}}Getter is a func({{.Key}})->{{.Val}}
type {{.Type}}Getter = func({{.Key}}) {{.Val}}

// {{.Type}}Observer is a func({{.Key}}, old{{.Val}}, new{{.Val}})
type {{.Type}}Observer = func({{.Key}}, {{.Val}}, {{.Val}})

// {{.Type}}Setter is a func({{.Key}},{{.Val}})
type {{.Type}}Setter = func({{.Key}}, {{.Val}})

// New{{.Type}} returns a new {{.Type}}
func New{{.Type}}() *{{.Type}} {
	return &{{.Type}}{
		dat: make(map[{{.Key}}]{{.Val}}),
		obs: make([]{{.Type}}Observer, 0),
	}
}

// Get returns the {{.Val}} for a {{.Key}}
func (this *{{.Type}}) Get(k {{.Key}}) {{.Val}} { return this.dat[k] }

// Set saves a {{.Val}} for a {{.Key}}
func (this *{{.Type}}) Set(k {{.Key}}, v {{.Val}}) {
	this.mu.Lock()
	this.set(k, v)
	this.mu.Unlock()
}

func (this *{{.Type}}) set(k {{.Key}}, v {{.Val}}) {
	old := this.dat[k]
	if v != {{.Off}} {
		this.dat[k] = v
	} else {
		delete(this.dat, k)
	}
	for _, f := range this.obs {
		f(k, old, v)
	}
}

// Each calls the func for each {{.Key}},{{.Val}} in this {{.Type}}
func (this *{{.Type}}) Each(f {{.Type}}Setter) {
	this.mu.Lock()
	for k, v := range this.dat {
		f(k, v)
	}
	this.mu.Unlock()
}

// Sync calls the func within the cache lock state
func (this *{{.Type}}) Sync(f func({{.Type}}Getter, {{.Type}}Setter)) {
	this.mu.Lock()
	f(this.Get, this.set)
	this.mu.Unlock()
}

// Keys returns a new slice with all the {{.Key}} keys
func (this *{{.Type}}) Keys() []{{.Key}} {
	this.mu.Lock()
	keys := make([]{{.Key}}, 0, len(this.dat))
	for k := range this.dat {
		keys = append(keys, k)
	}
	this.mu.Unlock()
	return keys
}

// Observe adds a func to be called when a {{.Val}} is set
func (this *{{.Type}}) Observe(f {{.Type}}Observer) { this.obs = append(this.obs, f) }

// Remove deletes a {{.Key}},{{.Val}}
func (this *{{.Type}}) Remove(k {{.Key}}) { this.Set(k, {{.Off}}) }
`
